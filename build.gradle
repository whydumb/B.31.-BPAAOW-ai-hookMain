plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("io.github.goooler.shadow") version "8.1.8"
}

group = 'me.red'
version = '1.0'

repositories {
    mavenCentral()

    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT")
    
    // bukkit 에서의 종속성 추가
    compileOnly("net.kyori:adventure-api:4.14.0")
    compileOnly("net.kyori:adventure-text-minimessage:4.14.0")
    compileOnly("net.kyori:adventure-platform-bukkit:4.3.1")
    
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor('org.projectlombok:lombok:1.18.32')

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.google.guava:guava:33.1.0-jre'

    implementation 'org.mongodb:mongodb-driver-sync:5.3.0'

    //Command API
    implementation 'io.github.revxrsal:lamp.common:4.0.0-rc.9'
    implementation 'io.github.revxrsal:lamp.bukkit:4.0.0-rc.9'
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
    compileJava {
        dependsOn clean
        options.encoding = 'UTF-8'
    }

    build {
        dependsOn shadowJar
    }
}

shadowJar {
    archiveFileName = 'MovementTracker-' + version + '.jar'
    archiveClassifier.set('')
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
